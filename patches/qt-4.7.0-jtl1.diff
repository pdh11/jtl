--- qt-everywhere-opensource-src-4.7.0/src/3rdparty/webkit/JavaScriptCore/pcre/pcre.pri~	2010-09-10 10:05:22.000000000 +0100
+++ qt-everywhere-opensource-src-4.7.0/src/3rdparty/javascriptcore/JavaScriptCore/pcre/pcre.pri	2010-09-25 22:32:10.000000000 +0100
@@ -1,6 +1,9 @@
 # Perl Compatible Regular Expressions - Qt4 build info
 VPATH += $$PWD
-INCLUDEPATH += $$PWD $$OUTPUT_DIR/JavaScriptCore/tmp
+
+isEmpty(OUTPUT_DIR): OUTPUT_DIR = ../..
+
+INCLUDEPATH += $$PWD ../../JavaScriptCore/tmp
 DEPENDPATH += $$PWD
 
 SOURCES += \
--- qt-everywhere-opensource-src-4.7.0/src/3rdparty/webkit/JavaScriptCore/JavaScriptCore.pro~	2010-09-10 10:05:22.000000000 +0100
+++ qt-everywhere-opensource-src-4.7.0/src/3rdparty/webkit/Source/JavaScriptCore/JavaScriptCore.pro	2010-09-25 22:33:13.000000000 +0100
@@ -1,5 +1,8 @@
 # JavaScriptCore - qmake build info
 CONFIG += building-libs
+
+OUTPUT_DIR = ..
+
 include($$PWD/../WebKit.pri)
 include(JavaScriptCore.pri)
 
--- qt-everywhere-opensource-src-4.8.0/src/3rdparty/webkit/Source/WebKit.pri~	2012-02-10 16:56:48.000000000 +0000
+++ qt-everywhere-opensource-src-4.8.0/src/3rdparty/webkit/Source/WebKit.pri	2012-02-11 21:43:58.000000000 +0000
@@ -36,6 +36,8 @@ CONFIG(standalone_package): DEFINES *= N
 CONFIG += depend_includepath
 DEPENDPATH += $$OUT_PWD
 
+isEmpty(OUTPUT_DIR): OUTPUT_DIR = ../..
+
 DEFINES += BUILDING_QT__=1
 building-libs {
     win32-msvc*|win32-icc: INCLUDEPATH += $$PWD/JavaScriptCore/os-win32
--- qt-everywhere-opensource-src-4.8.0/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSGlobalObject.h~	2011-12-08 05:06:02.000000000 +0000
+++ qt-everywhere-opensource-src-4.8.0/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSGlobalObject.h	2012-03-22 17:55:33.000000000 +0000
@@ -57,7 +57,7 @@ namespace JSC {
     
     class JSGlobalObject : public JSVariableObject {
     protected:
-        using JSVariableObject::JSVariableObjectData;
+        //using JSVariableObject::JSVariableObjectData;
 
         struct JSGlobalObjectData : public JSVariableObjectData {
             // We use an explicit destructor function pointer instead of a
--- qt-everywhere-opensource-src-4.8.4/src/gui/image/qjpeghandler.cpp~	2012-11-23 10:09:53.000000000 +0000
+++ qt-everywhere-opensource-src-4.8.4/src/gui/image/qjpeghandler.cpp	2013-01-27 19:17:24.000000000 +0000
@@ -160,7 +160,7 @@ static boolean qt_fill_input_buffer(j_de
 #if defined(Q_OS_UNIXWARE)
     return B_TRUE;
 #else
-    return true;
+    return TRUE;
 #endif
 }
 
@@ -492,7 +492,7 @@ static boolean qt_empty_output_buffer(j_
 #if defined(Q_OS_UNIXWARE)
     return B_TRUE;
 #else
-    return true;
+    return TRUE;
 #endif
 }
 
@@ -588,8 +588,8 @@ static bool write_jpeg_image(const QImag
         jpeg_set_quality(&cinfo, quality, B_TRUE /* limit to baseline-JPEG values */);
         jpeg_start_compress(&cinfo, B_TRUE);
 #else
-        jpeg_set_quality(&cinfo, quality, true /* limit to baseline-JPEG values */);
-        jpeg_start_compress(&cinfo, true);
+        jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);
+        jpeg_start_compress(&cinfo, TRUE);
 #endif
 
         row_pointer[0] = new uchar[cinfo.image_width*cinfo.input_components];
@@ -754,7 +754,7 @@ bool QJpegHandlerPrivate::readJpegHeader
     #if defined(Q_OS_UNIXWARE)
             (void) jpeg_read_header(&info, B_TRUE);
     #else
-            (void) jpeg_read_header(&info, true);
+            (void) jpeg_read_header(&info, TRUE);
     #endif
 
             int width = 0;
