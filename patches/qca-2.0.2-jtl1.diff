--- qca-2.0.2/src/botantools/botan/botan/secmem.h~	2007-04-19 22:26:13.000000000 +0100
+++ qca-2.0.2/src/botantools/botan/botan/secmem.h	2012-03-22 22:21:27.000000000 +0000
@@ -214,11 +214,11 @@ class SecureVector : public MemoryRegion
 
       SecureVector(u32bit n = 0) { MemoryRegion<T>::init(true, n); }
       SecureVector(const T in[], u32bit n)
-         { MemoryRegion<T>::init(true); set(in, n); }
+         { MemoryRegion<T>::init(true); this->set(in, n); }
       SecureVector(const MemoryRegion<T>& in)
-         { MemoryRegion<T>::init(true); set(in); }
+         { MemoryRegion<T>::init(true); this->set(in); }
       SecureVector(const MemoryRegion<T>& in1, const MemoryRegion<T>& in2)
-         { MemoryRegion<T>::init(true); set(in1); append(in2); }
+         { MemoryRegion<T>::init(true); this->set(in1); this->append(in2); }
    };
 
 /*************************************************
@@ -229,14 +229,14 @@ class SecureBuffer : public MemoryRegion
    {
    public:
       SecureBuffer<T,L>& operator=(const SecureBuffer<T,L>& in)
-         { if(this != &in) set(in); return (*this); }
+         { if(this != &in) this->set(in); return (*this); }
 
       SecureBuffer() { MemoryRegion<T>::init(true, L); }
       SecureBuffer(const T in[], u32bit n)
-         { MemoryRegion<T>::init(true, L); copy(in, n); }
+         { MemoryRegion<T>::init(true, L); this->copy(in, n); }
    private:
       SecureBuffer<T, L>& operator=(const MemoryRegion<T>& in)
-         { if(this != &in) set(in); return (*this); }
+         { if(this != &in) this->set(in); return (*this); }
    };
 
 }
